<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: riak.proto
//   Date: 2012-11-23 03:51:14

namespace  {

  class RpbErrorResp extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $errmsg = null;
    
    /**  @var int */
    public $errcode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbErrorResp');

      // REQUIRED BYTES errmsg = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errmsg";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 errcode = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "errcode";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errmsg> has a value
     *
     * @return boolean
     */
    public function hasErrmsg(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errmsg> value
     *
     * @return \RpbErrorResp
     */
    public function clearErrmsg(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errmsg> value
     *
     * @return string
     */
    public function getErrmsg(){
      return $this->_get(1);
    }
    
    /**
     * Set <errmsg> value
     *
     * @param string $value
     * @return \RpbErrorResp
     */
    public function setErrmsg( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <errcode> has a value
     *
     * @return boolean
     */
    public function hasErrcode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <errcode> value
     *
     * @return \RpbErrorResp
     */
    public function clearErrcode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <errcode> value
     *
     * @return int
     */
    public function getErrcode(){
      return $this->_get(2);
    }
    
    /**
     * Set <errcode> value
     *
     * @param int $value
     * @return \RpbErrorResp
     */
    public function setErrcode( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbGetServerInfoResp extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $node = null;
    
    /**  @var string */
    public $server_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetServerInfoResp');

      // OPTIONAL BYTES node = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES server_version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "server_version";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node> value
     *
     * @return \RpbGetServerInfoResp
     */
    public function clearNode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node> value
     *
     * @return string
     */
    public function getNode(){
      return $this->_get(1);
    }
    
    /**
     * Set <node> value
     *
     * @param string $value
     * @return \RpbGetServerInfoResp
     */
    public function setNode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <server_version> has a value
     *
     * @return boolean
     */
    public function hasServerVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <server_version> value
     *
     * @return \RpbGetServerInfoResp
     */
    public function clearServerVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <server_version> value
     *
     * @return string
     */
    public function getServerVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <server_version> value
     *
     * @param string $value
     * @return \RpbGetServerInfoResp
     */
    public function setServerVersion( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbPair extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbPair');

      // REQUIRED BYTES key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbPair
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbPair
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \RpbPair
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \RpbPair
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbGetClientIdResp extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $client_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetClientIdResp');

      // REQUIRED BYTES client_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client_id";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client_id> has a value
     *
     * @return boolean
     */
    public function hasClientId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client_id> value
     *
     * @return \RpbGetClientIdResp
     */
    public function clearClientId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client_id> value
     *
     * @return string
     */
    public function getClientId(){
      return $this->_get(1);
    }
    
    /**
     * Set <client_id> value
     *
     * @param string $value
     * @return \RpbGetClientIdResp
     */
    public function setClientId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class RpbSetClientIdReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $client_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSetClientIdReq');

      // REQUIRED BYTES client_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client_id";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client_id> has a value
     *
     * @return boolean
     */
    public function hasClientId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client_id> value
     *
     * @return \RpbSetClientIdReq
     */
    public function clearClientId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client_id> value
     *
     * @return string
     */
    public function getClientId(){
      return $this->_get(1);
    }
    
    /**
     * Set <client_id> value
     *
     * @param string $value
     * @return \RpbSetClientIdReq
     */
    public function setClientId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class RpbGetReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $r = null;
    
    /**  @var int */
    public $pr = null;
    
    /**  @var boolean */
    public $basic_quorum = null;
    
    /**  @var boolean */
    public $notfound_ok = null;
    
    /**  @var string */
    public $if_modified = null;
    
    /**  @var boolean */
    public $head = null;
    
    /**  @var boolean */
    public $deletedvclock = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BYTES key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 r = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "r";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pr = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pr";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL basic_quorum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "basic_quorum";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL notfound_ok = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "notfound_ok";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES if_modified = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "if_modified";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL head = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "head";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL deletedvclock = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "deletedvclock";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbGetReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbGetReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbGetReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbGetReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(3);
    }
    
    /**
     * Clear <r> value
     *
     * @return \RpbGetReq
     */
    public function clearR(){
      return $this->_clear(3);
    }
    
    /**
     * Get <r> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(3);
    }
    
    /**
     * Set <r> value
     *
     * @param int $value
     * @return \RpbGetReq
     */
    public function setR( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pr> has a value
     *
     * @return boolean
     */
    public function hasPr(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pr> value
     *
     * @return \RpbGetReq
     */
    public function clearPr(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pr> value
     *
     * @return int
     */
    public function getPr(){
      return $this->_get(4);
    }
    
    /**
     * Set <pr> value
     *
     * @param int $value
     * @return \RpbGetReq
     */
    public function setPr( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <basic_quorum> has a value
     *
     * @return boolean
     */
    public function hasBasicQuorum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <basic_quorum> value
     *
     * @return \RpbGetReq
     */
    public function clearBasicQuorum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <basic_quorum> value
     *
     * @return boolean
     */
    public function getBasicQuorum(){
      return $this->_get(5);
    }
    
    /**
     * Set <basic_quorum> value
     *
     * @param boolean $value
     * @return \RpbGetReq
     */
    public function setBasicQuorum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <notfound_ok> has a value
     *
     * @return boolean
     */
    public function hasNotfoundOk(){
      return $this->_has(6);
    }
    
    /**
     * Clear <notfound_ok> value
     *
     * @return \RpbGetReq
     */
    public function clearNotfoundOk(){
      return $this->_clear(6);
    }
    
    /**
     * Get <notfound_ok> value
     *
     * @return boolean
     */
    public function getNotfoundOk(){
      return $this->_get(6);
    }
    
    /**
     * Set <notfound_ok> value
     *
     * @param boolean $value
     * @return \RpbGetReq
     */
    public function setNotfoundOk( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <if_modified> has a value
     *
     * @return boolean
     */
    public function hasIfModified(){
      return $this->_has(7);
    }
    
    /**
     * Clear <if_modified> value
     *
     * @return \RpbGetReq
     */
    public function clearIfModified(){
      return $this->_clear(7);
    }
    
    /**
     * Get <if_modified> value
     *
     * @return string
     */
    public function getIfModified(){
      return $this->_get(7);
    }
    
    /**
     * Set <if_modified> value
     *
     * @param string $value
     * @return \RpbGetReq
     */
    public function setIfModified( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <head> has a value
     *
     * @return boolean
     */
    public function hasHead(){
      return $this->_has(8);
    }
    
    /**
     * Clear <head> value
     *
     * @return \RpbGetReq
     */
    public function clearHead(){
      return $this->_clear(8);
    }
    
    /**
     * Get <head> value
     *
     * @return boolean
     */
    public function getHead(){
      return $this->_get(8);
    }
    
    /**
     * Set <head> value
     *
     * @param boolean $value
     * @return \RpbGetReq
     */
    public function setHead( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <deletedvclock> has a value
     *
     * @return boolean
     */
    public function hasDeletedvclock(){
      return $this->_has(9);
    }
    
    /**
     * Clear <deletedvclock> value
     *
     * @return \RpbGetReq
     */
    public function clearDeletedvclock(){
      return $this->_clear(9);
    }
    
    /**
     * Get <deletedvclock> value
     *
     * @return boolean
     */
    public function getDeletedvclock(){
      return $this->_get(9);
    }
    
    /**
     * Set <deletedvclock> value
     *
     * @param boolean $value
     * @return \RpbGetReq
     */
    public function setDeletedvclock( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace  {

  class RpbGetResp extends \DrSlump\Protobuf\Message {

    /**  @var \RpbContent[]  */
    public $content = array();
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var boolean */
    public $unchanged = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetResp');

      // REPEATED MESSAGE content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbContent';
      $descriptor->addField($f);

      // OPTIONAL BYTES vclock = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vclock";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL unchanged = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unchanged";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RpbGetResp
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @param int $idx
     * @return \RpbContent
     */
    public function getContent($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <content> value
     *
     * @param \RpbContent $value
     * @return \RpbGetResp
     */
    public function setContent(\RpbContent $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <content>
     *
     * @return \RpbContent[]
     */
    public function getContentList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <content>
     *
     * @param \RpbContent $value
     * @return \RpbGetResp
     */
    public function addContent(\RpbContent $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \RpbGetResp
     */
    public function clearVclock(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(2);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \RpbGetResp
     */
    public function setVclock( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unchanged> has a value
     *
     * @return boolean
     */
    public function hasUnchanged(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unchanged> value
     *
     * @return \RpbGetResp
     */
    public function clearUnchanged(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unchanged> value
     *
     * @return boolean
     */
    public function getUnchanged(){
      return $this->_get(3);
    }
    
    /**
     * Set <unchanged> value
     *
     * @param boolean $value
     * @return \RpbGetResp
     */
    public function setUnchanged( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class RpbPutReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var \RpbContent */
    public $content = null;
    
    /**  @var int */
    public $w = null;
    
    /**  @var int */
    public $dw = null;
    
    /**  @var boolean */
    public $return_body = null;
    
    /**  @var int */
    public $pw = null;
    
    /**  @var boolean */
    public $if_not_modified = null;
    
    /**  @var boolean */
    public $if_none_match = null;
    
    /**  @var boolean */
    public $return_head = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbPutReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BYTES key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES vclock = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "vclock";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RpbContent';
      $descriptor->addField($f);

      // OPTIONAL UINT32 w = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "w";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dw = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dw";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL return_body = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "return_body";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pw = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "pw";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL if_not_modified = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "if_not_modified";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL if_none_match = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "if_none_match";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL return_head = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "return_head";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbPutReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbPutReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbPutReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbPutReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(3);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \RpbPutReq
     */
    public function clearVclock(){
      return $this->_clear(3);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(3);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \RpbPutReq
     */
    public function setVclock( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RpbPutReq
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return \RpbContent
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param \RpbContent $value
     * @return \RpbPutReq
     */
    public function setContent(\RpbContent $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <w> has a value
     *
     * @return boolean
     */
    public function hasW(){
      return $this->_has(5);
    }
    
    /**
     * Clear <w> value
     *
     * @return \RpbPutReq
     */
    public function clearW(){
      return $this->_clear(5);
    }
    
    /**
     * Get <w> value
     *
     * @return int
     */
    public function getW(){
      return $this->_get(5);
    }
    
    /**
     * Set <w> value
     *
     * @param int $value
     * @return \RpbPutReq
     */
    public function setW( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dw> has a value
     *
     * @return boolean
     */
    public function hasDw(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dw> value
     *
     * @return \RpbPutReq
     */
    public function clearDw(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dw> value
     *
     * @return int
     */
    public function getDw(){
      return $this->_get(6);
    }
    
    /**
     * Set <dw> value
     *
     * @param int $value
     * @return \RpbPutReq
     */
    public function setDw( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <return_body> has a value
     *
     * @return boolean
     */
    public function hasReturnBody(){
      return $this->_has(7);
    }
    
    /**
     * Clear <return_body> value
     *
     * @return \RpbPutReq
     */
    public function clearReturnBody(){
      return $this->_clear(7);
    }
    
    /**
     * Get <return_body> value
     *
     * @return boolean
     */
    public function getReturnBody(){
      return $this->_get(7);
    }
    
    /**
     * Set <return_body> value
     *
     * @param boolean $value
     * @return \RpbPutReq
     */
    public function setReturnBody( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <pw> has a value
     *
     * @return boolean
     */
    public function hasPw(){
      return $this->_has(8);
    }
    
    /**
     * Clear <pw> value
     *
     * @return \RpbPutReq
     */
    public function clearPw(){
      return $this->_clear(8);
    }
    
    /**
     * Get <pw> value
     *
     * @return int
     */
    public function getPw(){
      return $this->_get(8);
    }
    
    /**
     * Set <pw> value
     *
     * @param int $value
     * @return \RpbPutReq
     */
    public function setPw( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <if_not_modified> has a value
     *
     * @return boolean
     */
    public function hasIfNotModified(){
      return $this->_has(9);
    }
    
    /**
     * Clear <if_not_modified> value
     *
     * @return \RpbPutReq
     */
    public function clearIfNotModified(){
      return $this->_clear(9);
    }
    
    /**
     * Get <if_not_modified> value
     *
     * @return boolean
     */
    public function getIfNotModified(){
      return $this->_get(9);
    }
    
    /**
     * Set <if_not_modified> value
     *
     * @param boolean $value
     * @return \RpbPutReq
     */
    public function setIfNotModified( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <if_none_match> has a value
     *
     * @return boolean
     */
    public function hasIfNoneMatch(){
      return $this->_has(10);
    }
    
    /**
     * Clear <if_none_match> value
     *
     * @return \RpbPutReq
     */
    public function clearIfNoneMatch(){
      return $this->_clear(10);
    }
    
    /**
     * Get <if_none_match> value
     *
     * @return boolean
     */
    public function getIfNoneMatch(){
      return $this->_get(10);
    }
    
    /**
     * Set <if_none_match> value
     *
     * @param boolean $value
     * @return \RpbPutReq
     */
    public function setIfNoneMatch( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <return_head> has a value
     *
     * @return boolean
     */
    public function hasReturnHead(){
      return $this->_has(11);
    }
    
    /**
     * Clear <return_head> value
     *
     * @return \RpbPutReq
     */
    public function clearReturnHead(){
      return $this->_clear(11);
    }
    
    /**
     * Get <return_head> value
     *
     * @return boolean
     */
    public function getReturnHead(){
      return $this->_get(11);
    }
    
    /**
     * Set <return_head> value
     *
     * @param boolean $value
     * @return \RpbPutReq
     */
    public function setReturnHead( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace  {

  class RpbPutResp extends \DrSlump\Protobuf\Message {

    /**  @var \RpbContent[]  */
    public $content = array();
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var string */
    public $key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbPutResp');

      // REPEATED MESSAGE content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbContent';
      $descriptor->addField($f);

      // OPTIONAL BYTES vclock = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vclock";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RpbPutResp
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @param int $idx
     * @return \RpbContent
     */
    public function getContent($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <content> value
     *
     * @param \RpbContent $value
     * @return \RpbPutResp
     */
    public function setContent(\RpbContent $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <content>
     *
     * @return \RpbContent[]
     */
    public function getContentList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <content>
     *
     * @param \RpbContent $value
     * @return \RpbPutResp
     */
    public function addContent(\RpbContent $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \RpbPutResp
     */
    public function clearVclock(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(2);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \RpbPutResp
     */
    public function setVclock( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(3);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbPutResp
     */
    public function clearKey(){
      return $this->_clear(3);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(3);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbPutResp
     */
    public function setKey( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class RpbDelReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $rw = null;
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var int */
    public $r = null;
    
    /**  @var int */
    public $w = null;
    
    /**  @var int */
    public $pr = null;
    
    /**  @var int */
    public $pw = null;
    
    /**  @var int */
    public $dw = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbDelReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BYTES key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rw = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rw";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES vclock = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "vclock";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 r = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "r";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 w = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "w";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pr = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pr";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pw = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "pw";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dw = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "dw";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbDelReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbDelReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbDelReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbDelReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rw> has a value
     *
     * @return boolean
     */
    public function hasRw(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rw> value
     *
     * @return \RpbDelReq
     */
    public function clearRw(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rw> value
     *
     * @return int
     */
    public function getRw(){
      return $this->_get(3);
    }
    
    /**
     * Set <rw> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setRw( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(4);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \RpbDelReq
     */
    public function clearVclock(){
      return $this->_clear(4);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(4);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \RpbDelReq
     */
    public function setVclock( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(5);
    }
    
    /**
     * Clear <r> value
     *
     * @return \RpbDelReq
     */
    public function clearR(){
      return $this->_clear(5);
    }
    
    /**
     * Get <r> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(5);
    }
    
    /**
     * Set <r> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setR( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <w> has a value
     *
     * @return boolean
     */
    public function hasW(){
      return $this->_has(6);
    }
    
    /**
     * Clear <w> value
     *
     * @return \RpbDelReq
     */
    public function clearW(){
      return $this->_clear(6);
    }
    
    /**
     * Get <w> value
     *
     * @return int
     */
    public function getW(){
      return $this->_get(6);
    }
    
    /**
     * Set <w> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setW( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pr> has a value
     *
     * @return boolean
     */
    public function hasPr(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pr> value
     *
     * @return \RpbDelReq
     */
    public function clearPr(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pr> value
     *
     * @return int
     */
    public function getPr(){
      return $this->_get(7);
    }
    
    /**
     * Set <pr> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setPr( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <pw> has a value
     *
     * @return boolean
     */
    public function hasPw(){
      return $this->_has(8);
    }
    
    /**
     * Clear <pw> value
     *
     * @return \RpbDelReq
     */
    public function clearPw(){
      return $this->_clear(8);
    }
    
    /**
     * Get <pw> value
     *
     * @return int
     */
    public function getPw(){
      return $this->_get(8);
    }
    
    /**
     * Set <pw> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setPw( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <dw> has a value
     *
     * @return boolean
     */
    public function hasDw(){
      return $this->_has(9);
    }
    
    /**
     * Clear <dw> value
     *
     * @return \RpbDelReq
     */
    public function clearDw(){
      return $this->_clear(9);
    }
    
    /**
     * Get <dw> value
     *
     * @return int
     */
    public function getDw(){
      return $this->_get(9);
    }
    
    /**
     * Set <dw> value
     *
     * @param int $value
     * @return \RpbDelReq
     */
    public function setDw( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace  {

  class RpbListBucketsResp extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $buckets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbListBucketsResp');

      // REPEATED BYTES buckets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <buckets> value
     *
     * @return \RpbListBucketsResp
     */
    public function clearBuckets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return string
     */
    public function getBuckets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <buckets> value
     *
     * @param string $value
     * @return \RpbListBucketsResp
     */
    public function setBuckets( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <buckets>
     *
     * @return string[]
     */
    public function getBucketsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <buckets>
     *
     * @param string $value
     * @return \RpbListBucketsResp
     */
    public function addBuckets( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class RpbListKeysReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbListKeysReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbListKeysReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbListKeysReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class RpbListKeysResp extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $keys = array();
    
    /**  @var boolean */
    public $done = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbListKeysResp');

      // REPEATED BYTES keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL done = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "done";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \RpbListKeysResp
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param string $value
     * @return \RpbListKeysResp
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param string $value
     * @return \RpbListKeysResp
     */
    public function addKeys( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <done> has a value
     *
     * @return boolean
     */
    public function hasDone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <done> value
     *
     * @return \RpbListKeysResp
     */
    public function clearDone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <done> value
     *
     * @return boolean
     */
    public function getDone(){
      return $this->_get(2);
    }
    
    /**
     * Set <done> value
     *
     * @param boolean $value
     * @return \RpbListKeysResp
     */
    public function setDone( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbGetBucketReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetBucketReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbGetBucketReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbGetBucketReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class RpbGetBucketResp extends \DrSlump\Protobuf\Message {

    /**  @var \RpbBucketProps */
    public $props = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbGetBucketResp');

      // REQUIRED MESSAGE props = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "props";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RpbBucketProps';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <props> has a value
     *
     * @return boolean
     */
    public function hasProps(){
      return $this->_has(1);
    }
    
    /**
     * Clear <props> value
     *
     * @return \RpbGetBucketResp
     */
    public function clearProps(){
      return $this->_clear(1);
    }
    
    /**
     * Get <props> value
     *
     * @return \RpbBucketProps
     */
    public function getProps(){
      return $this->_get(1);
    }
    
    /**
     * Set <props> value
     *
     * @param \RpbBucketProps $value
     * @return \RpbGetBucketResp
     */
    public function setProps(\RpbBucketProps $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class RpbSetBucketReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var \RpbBucketProps */
    public $props = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSetBucketReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE props = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "props";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RpbBucketProps';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbSetBucketReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbSetBucketReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <props> has a value
     *
     * @return boolean
     */
    public function hasProps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <props> value
     *
     * @return \RpbSetBucketReq
     */
    public function clearProps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <props> value
     *
     * @return \RpbBucketProps
     */
    public function getProps(){
      return $this->_get(2);
    }
    
    /**
     * Set <props> value
     *
     * @param \RpbBucketProps $value
     * @return \RpbSetBucketReq
     */
    public function setProps(\RpbBucketProps $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbMapRedReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $request = null;
    
    /**  @var string */
    public $content_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbMapRedReq');

      // REQUIRED BYTES request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "request";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BYTES content_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content_type";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <request> has a value
     *
     * @return boolean
     */
    public function hasRequest(){
      return $this->_has(1);
    }
    
    /**
     * Clear <request> value
     *
     * @return \RpbMapRedReq
     */
    public function clearRequest(){
      return $this->_clear(1);
    }
    
    /**
     * Get <request> value
     *
     * @return string
     */
    public function getRequest(){
      return $this->_get(1);
    }
    
    /**
     * Set <request> value
     *
     * @param string $value
     * @return \RpbMapRedReq
     */
    public function setRequest( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content_type> has a value
     *
     * @return boolean
     */
    public function hasContentType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content_type> value
     *
     * @return \RpbMapRedReq
     */
    public function clearContentType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content_type> value
     *
     * @return string
     */
    public function getContentType(){
      return $this->_get(2);
    }
    
    /**
     * Set <content_type> value
     *
     * @param string $value
     * @return \RpbMapRedReq
     */
    public function setContentType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbMapRedResp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $phase = null;
    
    /**  @var string */
    public $response = null;
    
    /**  @var boolean */
    public $done = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbMapRedResp');

      // OPTIONAL UINT32 phase = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phase";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES response = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "response";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL done = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "done";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phase> has a value
     *
     * @return boolean
     */
    public function hasPhase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phase> value
     *
     * @return \RpbMapRedResp
     */
    public function clearPhase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phase> value
     *
     * @return int
     */
    public function getPhase(){
      return $this->_get(1);
    }
    
    /**
     * Set <phase> value
     *
     * @param int $value
     * @return \RpbMapRedResp
     */
    public function setPhase( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <response> has a value
     *
     * @return boolean
     */
    public function hasResponse(){
      return $this->_has(2);
    }
    
    /**
     * Clear <response> value
     *
     * @return \RpbMapRedResp
     */
    public function clearResponse(){
      return $this->_clear(2);
    }
    
    /**
     * Get <response> value
     *
     * @return string
     */
    public function getResponse(){
      return $this->_get(2);
    }
    
    /**
     * Set <response> value
     *
     * @param string $value
     * @return \RpbMapRedResp
     */
    public function setResponse( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <done> has a value
     *
     * @return boolean
     */
    public function hasDone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <done> value
     *
     * @return \RpbMapRedResp
     */
    public function clearDone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <done> value
     *
     * @return boolean
     */
    public function getDone(){
      return $this->_get(3);
    }
    
    /**
     * Set <done> value
     *
     * @param boolean $value
     * @return \RpbMapRedResp
     */
    public function setDone( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace RpbIndexReq {

  class IndexQueryType extends \DrSlump\Protobuf\Enum {
    const eq = 0;
    const range = 1;
  }
}
namespace  {

  class RpbIndexReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $index = null;
    
    /**  @var int - \RpbIndexReq\IndexQueryType */
    public $qtype = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $range_min = null;
    
    /**  @var string */
    public $range_max = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbIndexReq');

      // REQUIRED BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BYTES index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM qtype = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "qtype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RpbIndexReq\IndexQueryType';
      $descriptor->addField($f);

      // OPTIONAL BYTES key = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES range_min = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "range_min";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES range_max = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "range_max";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbIndexReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbIndexReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RpbIndexReq
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return string
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param string $value
     * @return \RpbIndexReq
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <qtype> has a value
     *
     * @return boolean
     */
    public function hasQtype(){
      return $this->_has(3);
    }
    
    /**
     * Clear <qtype> value
     *
     * @return \RpbIndexReq
     */
    public function clearQtype(){
      return $this->_clear(3);
    }
    
    /**
     * Get <qtype> value
     *
     * @return int - \RpbIndexReq\IndexQueryType
     */
    public function getQtype(){
      return $this->_get(3);
    }
    
    /**
     * Set <qtype> value
     *
     * @param int - \RpbIndexReq\IndexQueryType $value
     * @return \RpbIndexReq
     */
    public function setQtype( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(4);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbIndexReq
     */
    public function clearKey(){
      return $this->_clear(4);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(4);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbIndexReq
     */
    public function setKey( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <range_min> has a value
     *
     * @return boolean
     */
    public function hasRangeMin(){
      return $this->_has(5);
    }
    
    /**
     * Clear <range_min> value
     *
     * @return \RpbIndexReq
     */
    public function clearRangeMin(){
      return $this->_clear(5);
    }
    
    /**
     * Get <range_min> value
     *
     * @return string
     */
    public function getRangeMin(){
      return $this->_get(5);
    }
    
    /**
     * Set <range_min> value
     *
     * @param string $value
     * @return \RpbIndexReq
     */
    public function setRangeMin( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <range_max> has a value
     *
     * @return boolean
     */
    public function hasRangeMax(){
      return $this->_has(6);
    }
    
    /**
     * Clear <range_max> value
     *
     * @return \RpbIndexReq
     */
    public function clearRangeMax(){
      return $this->_clear(6);
    }
    
    /**
     * Get <range_max> value
     *
     * @return string
     */
    public function getRangeMax(){
      return $this->_get(6);
    }
    
    /**
     * Set <range_max> value
     *
     * @param string $value
     * @return \RpbIndexReq
     */
    public function setRangeMax( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace  {

  class RpbIndexResp extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbIndexResp');

      // REPEATED BYTES keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \RpbIndexResp
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param string $value
     * @return \RpbIndexResp
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param string $value
     * @return \RpbIndexResp
     */
    public function addKeys( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class RpbContent extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $content_type = null;
    
    /**  @var string */
    public $charset = null;
    
    /**  @var string */
    public $content_encoding = null;
    
    /**  @var string */
    public $vtag = null;
    
    /**  @var \RpbLink[]  */
    public $links = array();
    
    /**  @var int */
    public $last_mod = null;
    
    /**  @var int */
    public $last_mod_usecs = null;
    
    /**  @var \RpbPair[]  */
    public $usermeta = array();
    
    /**  @var \RpbPair[]  */
    public $indexes = array();
    
    /**  @var boolean */
    public $deleted = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbContent');

      // REQUIRED BYTES value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BYTES content_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content_type";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES charset = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES content_encoding = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content_encoding";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES vtag = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "vtag";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbLink';
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_mod = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "last_mod";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_mod_usecs = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "last_mod_usecs";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE usermeta = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "usermeta";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbPair';
      $descriptor->addField($f);

      // REPEATED MESSAGE indexes = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "indexes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbPair';
      $descriptor->addField($f);

      // OPTIONAL BOOL deleted = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "deleted";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \RpbContent
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \RpbContent
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content_type> has a value
     *
     * @return boolean
     */
    public function hasContentType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content_type> value
     *
     * @return \RpbContent
     */
    public function clearContentType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content_type> value
     *
     * @return string
     */
    public function getContentType(){
      return $this->_get(2);
    }
    
    /**
     * Set <content_type> value
     *
     * @param string $value
     * @return \RpbContent
     */
    public function setContentType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \RpbContent
     */
    public function clearCharset(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charset> value
     *
     * @return string
     */
    public function getCharset(){
      return $this->_get(3);
    }
    
    /**
     * Set <charset> value
     *
     * @param string $value
     * @return \RpbContent
     */
    public function setCharset( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content_encoding> has a value
     *
     * @return boolean
     */
    public function hasContentEncoding(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content_encoding> value
     *
     * @return \RpbContent
     */
    public function clearContentEncoding(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content_encoding> value
     *
     * @return string
     */
    public function getContentEncoding(){
      return $this->_get(4);
    }
    
    /**
     * Set <content_encoding> value
     *
     * @param string $value
     * @return \RpbContent
     */
    public function setContentEncoding( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <vtag> has a value
     *
     * @return boolean
     */
    public function hasVtag(){
      return $this->_has(5);
    }
    
    /**
     * Clear <vtag> value
     *
     * @return \RpbContent
     */
    public function clearVtag(){
      return $this->_clear(5);
    }
    
    /**
     * Get <vtag> value
     *
     * @return string
     */
    public function getVtag(){
      return $this->_get(5);
    }
    
    /**
     * Set <vtag> value
     *
     * @param string $value
     * @return \RpbContent
     */
    public function setVtag( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(6);
    }
    
    /**
     * Clear <links> value
     *
     * @return \RpbContent
     */
    public function clearLinks(){
      return $this->_clear(6);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \RpbLink
     */
    public function getLinks($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \RpbLink $value
     * @return \RpbContent
     */
    public function setLinks(\RpbLink $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \RpbLink[]
     */
    public function getLinksList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \RpbLink $value
     * @return \RpbContent
     */
    public function addLinks(\RpbLink $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <last_mod> has a value
     *
     * @return boolean
     */
    public function hasLastMod(){
      return $this->_has(7);
    }
    
    /**
     * Clear <last_mod> value
     *
     * @return \RpbContent
     */
    public function clearLastMod(){
      return $this->_clear(7);
    }
    
    /**
     * Get <last_mod> value
     *
     * @return int
     */
    public function getLastMod(){
      return $this->_get(7);
    }
    
    /**
     * Set <last_mod> value
     *
     * @param int $value
     * @return \RpbContent
     */
    public function setLastMod( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <last_mod_usecs> has a value
     *
     * @return boolean
     */
    public function hasLastModUsecs(){
      return $this->_has(8);
    }
    
    /**
     * Clear <last_mod_usecs> value
     *
     * @return \RpbContent
     */
    public function clearLastModUsecs(){
      return $this->_clear(8);
    }
    
    /**
     * Get <last_mod_usecs> value
     *
     * @return int
     */
    public function getLastModUsecs(){
      return $this->_get(8);
    }
    
    /**
     * Set <last_mod_usecs> value
     *
     * @param int $value
     * @return \RpbContent
     */
    public function setLastModUsecs( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <usermeta> has a value
     *
     * @return boolean
     */
    public function hasUsermeta(){
      return $this->_has(9);
    }
    
    /**
     * Clear <usermeta> value
     *
     * @return \RpbContent
     */
    public function clearUsermeta(){
      return $this->_clear(9);
    }
    
    /**
     * Get <usermeta> value
     *
     * @param int $idx
     * @return \RpbPair
     */
    public function getUsermeta($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <usermeta> value
     *
     * @param \RpbPair $value
     * @return \RpbContent
     */
    public function setUsermeta(\RpbPair $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <usermeta>
     *
     * @return \RpbPair[]
     */
    public function getUsermetaList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <usermeta>
     *
     * @param \RpbPair $value
     * @return \RpbContent
     */
    public function addUsermeta(\RpbPair $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <indexes> has a value
     *
     * @return boolean
     */
    public function hasIndexes(){
      return $this->_has(10);
    }
    
    /**
     * Clear <indexes> value
     *
     * @return \RpbContent
     */
    public function clearIndexes(){
      return $this->_clear(10);
    }
    
    /**
     * Get <indexes> value
     *
     * @param int $idx
     * @return \RpbPair
     */
    public function getIndexes($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <indexes> value
     *
     * @param \RpbPair $value
     * @return \RpbContent
     */
    public function setIndexes(\RpbPair $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <indexes>
     *
     * @return \RpbPair[]
     */
    public function getIndexesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <indexes>
     *
     * @param \RpbPair $value
     * @return \RpbContent
     */
    public function addIndexes(\RpbPair $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <deleted> has a value
     *
     * @return boolean
     */
    public function hasDeleted(){
      return $this->_has(11);
    }
    
    /**
     * Clear <deleted> value
     *
     * @return \RpbContent
     */
    public function clearDeleted(){
      return $this->_clear(11);
    }
    
    /**
     * Get <deleted> value
     *
     * @return boolean
     */
    public function getDeleted(){
      return $this->_get(11);
    }
    
    /**
     * Set <deleted> value
     *
     * @param boolean $value
     * @return \RpbContent
     */
    public function setDeleted( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace  {

  class RpbLink extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $tag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbLink');

      // OPTIONAL BYTES bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES tag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tag";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RpbLink
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RpbLink
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RpbLink
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RpbLink
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tag> value
     *
     * @return \RpbLink
     */
    public function clearTag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tag> value
     *
     * @return string
     */
    public function getTag(){
      return $this->_get(3);
    }
    
    /**
     * Set <tag> value
     *
     * @param string $value
     * @return \RpbLink
     */
    public function setTag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class RpbBucketProps extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $n_val = null;
    
    /**  @var boolean */
    public $allow_mult = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbBucketProps');

      // OPTIONAL UINT32 n_val = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "n_val";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_mult = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allow_mult";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <n_val> has a value
     *
     * @return boolean
     */
    public function hasNVal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <n_val> value
     *
     * @return \RpbBucketProps
     */
    public function clearNVal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <n_val> value
     *
     * @return int
     */
    public function getNVal(){
      return $this->_get(1);
    }
    
    /**
     * Set <n_val> value
     *
     * @param int $value
     * @return \RpbBucketProps
     */
    public function setNVal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <allow_mult> has a value
     *
     * @return boolean
     */
    public function hasAllowMult(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allow_mult> value
     *
     * @return \RpbBucketProps
     */
    public function clearAllowMult(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allow_mult> value
     *
     * @return boolean
     */
    public function getAllowMult(){
      return $this->_get(2);
    }
    
    /**
     * Set <allow_mult> value
     *
     * @param boolean $value
     * @return \RpbBucketProps
     */
    public function setAllowMult( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class RpbSearchDoc extends \DrSlump\Protobuf\Message {

    /**  @var \RpbPair[]  */
    public $fields = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSearchDoc');

      // REPEATED MESSAGE fields = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbPair';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \RpbSearchDoc
     */
    public function clearFields(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \RpbPair
     */
    public function getFields($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \RpbPair $value
     * @return \RpbSearchDoc
     */
    public function setFields(\RpbPair $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \RpbPair[]
     */
    public function getFieldsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \RpbPair $value
     * @return \RpbSearchDoc
     */
    public function addFields(\RpbPair $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class RpbSearchQueryReq extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $q = null;
    
    /**  @var string */
    public $index = null;
    
    /**  @var int */
    public $rows = null;
    
    /**  @var int */
    public $start = null;
    
    /**  @var string */
    public $sort = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var string */
    public $df = null;
    
    /**  @var string */
    public $op = null;
    
    /**  @var string[]  */
    public $fl = array();
    
    /**  @var string */
    public $presort = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSearchQueryReq');

      // REQUIRED BYTES q = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "q";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BYTES index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rows = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rows";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 start = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES sort = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sort";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES filter = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES df = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "df";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES op = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "op";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED BYTES fl = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "fl";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BYTES presort = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "presort";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <q> has a value
     *
     * @return boolean
     */
    public function hasQ(){
      return $this->_has(1);
    }
    
    /**
     * Clear <q> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearQ(){
      return $this->_clear(1);
    }
    
    /**
     * Get <q> value
     *
     * @return string
     */
    public function getQ(){
      return $this->_get(1);
    }
    
    /**
     * Set <q> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setQ( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return string
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rows> has a value
     *
     * @return boolean
     */
    public function hasRows(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rows> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearRows(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rows> value
     *
     * @return int
     */
    public function getRows(){
      return $this->_get(3);
    }
    
    /**
     * Set <rows> value
     *
     * @param int $value
     * @return \RpbSearchQueryReq
     */
    public function setRows( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(4);
    }
    
    /**
     * Clear <start> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearStart(){
      return $this->_clear(4);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(4);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \RpbSearchQueryReq
     */
    public function setStart( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sort> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearSort(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sort> value
     *
     * @return string
     */
    public function getSort(){
      return $this->_get(5);
    }
    
    /**
     * Set <sort> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setSort( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(6);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearFilter(){
      return $this->_clear(6);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(6);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setFilter( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <df> has a value
     *
     * @return boolean
     */
    public function hasDf(){
      return $this->_has(7);
    }
    
    /**
     * Clear <df> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearDf(){
      return $this->_clear(7);
    }
    
    /**
     * Get <df> value
     *
     * @return string
     */
    public function getDf(){
      return $this->_get(7);
    }
    
    /**
     * Set <df> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setDf( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <op> has a value
     *
     * @return boolean
     */
    public function hasOp(){
      return $this->_has(8);
    }
    
    /**
     * Clear <op> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearOp(){
      return $this->_clear(8);
    }
    
    /**
     * Get <op> value
     *
     * @return string
     */
    public function getOp(){
      return $this->_get(8);
    }
    
    /**
     * Set <op> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setOp( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <fl> has a value
     *
     * @return boolean
     */
    public function hasFl(){
      return $this->_has(9);
    }
    
    /**
     * Clear <fl> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearFl(){
      return $this->_clear(9);
    }
    
    /**
     * Get <fl> value
     *
     * @param int $idx
     * @return string
     */
    public function getFl($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <fl> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setFl( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <fl>
     *
     * @return string[]
     */
    public function getFlList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <fl>
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function addFl( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <presort> has a value
     *
     * @return boolean
     */
    public function hasPresort(){
      return $this->_has(10);
    }
    
    /**
     * Clear <presort> value
     *
     * @return \RpbSearchQueryReq
     */
    public function clearPresort(){
      return $this->_clear(10);
    }
    
    /**
     * Get <presort> value
     *
     * @return string
     */
    public function getPresort(){
      return $this->_get(10);
    }
    
    /**
     * Set <presort> value
     *
     * @param string $value
     * @return \RpbSearchQueryReq
     */
    public function setPresort( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace  {

  class RpbSearchQueryResp extends \DrSlump\Protobuf\Message {

    /**  @var \RpbSearchDoc[]  */
    public $docs = array();
    
    /**  @var float */
    public $max_score = null;
    
    /**  @var int */
    public $num_found = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSearchQueryResp');

      // REPEATED MESSAGE docs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "docs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RpbSearchDoc';
      $descriptor->addField($f);

      // OPTIONAL FLOAT max_score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 num_found = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "num_found";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <docs> has a value
     *
     * @return boolean
     */
    public function hasDocs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <docs> value
     *
     * @return \RpbSearchQueryResp
     */
    public function clearDocs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <docs> value
     *
     * @param int $idx
     * @return \RpbSearchDoc
     */
    public function getDocs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <docs> value
     *
     * @param \RpbSearchDoc $value
     * @return \RpbSearchQueryResp
     */
    public function setDocs(\RpbSearchDoc $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <docs>
     *
     * @return \RpbSearchDoc[]
     */
    public function getDocsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <docs>
     *
     * @param \RpbSearchDoc $value
     * @return \RpbSearchQueryResp
     */
    public function addDocs(\RpbSearchDoc $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <max_score> has a value
     *
     * @return boolean
     */
    public function hasMaxScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_score> value
     *
     * @return \RpbSearchQueryResp
     */
    public function clearMaxScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_score> value
     *
     * @return float
     */
    public function getMaxScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_score> value
     *
     * @param float $value
     * @return \RpbSearchQueryResp
     */
    public function setMaxScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <num_found> has a value
     *
     * @return boolean
     */
    public function hasNumFound(){
      return $this->_has(3);
    }
    
    /**
     * Clear <num_found> value
     *
     * @return \RpbSearchQueryResp
     */
    public function clearNumFound(){
      return $this->_clear(3);
    }
    
    /**
     * Get <num_found> value
     *
     * @return int
     */
    public function getNumFound(){
      return $this->_get(3);
    }
    
    /**
     * Set <num_found> value
     *
     * @param int $value
     * @return \RpbSearchQueryResp
     */
    public function setNumFound( $value){
      return $this->_set(3, $value);
    }
  }
}

